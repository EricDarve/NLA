/**
 * Transform a hast tree to preact, react, solid, svelte, vue, etc.,
 * with an automatic JSX runtime.
 *
 * @param {Node} tree
 *   Tree to transform.
 * @param {Options} options
 *   Configuration (required).
 * @returns {JSX.Element}
 *   JSX element.
 */
export function toJsxRuntime(tree: Node, options: Options): JSX.Element
export type Schema = import('property-information').Schema
export type Content = import('hast').Content
export type Element = import('hast').Element
export type Root = import('hast').Root
export type Components = import('./components.js').Components
export type Node = Content | Root
export type Parent = Extract<Node, import('unist').Parent>
/**
 * Represent the children, typically a symbol.
 */
export type Fragment = unknown
/**
 * Create a production element.
 */
export type Jsx = (
  type: unknown,
  props: Props,
  key?: string | undefined
) => JSX.Element
/**
 * Create a development element.
 */
export type JsxDev = (
  type: unknown,
  props: Props,
  key: string | undefined,
  isStaticChildren: boolean,
  source: Source,
  self: undefined
) => JSX.Element
/**
 * Namespace.
 *
 * > ðŸ‘‰ **Note**: hast is not XML.
 * > It supports SVG as embedded in HTML.
 * > It does not support the features available in XML.
 * > Passing SVG might break but fragments of modern SVG should be fine.
 * > Use `xast` if you need to support SVG as XML.
 */
export type Space = 'html' | 'svg'
/**
 * Casing to use for attribute names.
 *
 * HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.
 * React casing is for example `className`, `strokeLinecap`, `xmlLang`.
 */
export type ElementAttributeNameCase = 'html' | 'react'
/**
 * Casing to use for property names in `style` objects.
 *
 * CSS casing is for example `background-color` and `-webkit-line-clamp`.
 * DOM casing is for example `backgroundColor` and `WebkitLineClamp`.
 */
export type StylePropertyNameCase = 'css' | 'dom'
/**
 * Info about source.
 */
export type Source = {
  /**
   *   Name of source file.
   */
  fileName: string | undefined
  /**
   *   Line where thing starts (1-indexed).
   */
  lineNumber: number | undefined
  /**
   *   Column where thing starts (0-indexed).
   */
  columnNumber: number | undefined
}
/**
 * Style map.
 */
export type Style = Record<string, string>
/**
 * Primitive property value and `Style` map.
 */
export type Value = Style | string | number | boolean
/**
 * Property field.
 */
export type Field = [string, Value]
/**
 * Child.
 */
export type Child = JSX.Element | string | null | undefined
/**
 * Properties and children.
 */
export type Props = {
  [prop: string]:
    | string
    | number
    | boolean
    | import('hast').Element
    | Style
    | JSX.Element
    | Child[]
    | null
    | undefined
  children?: Array<Child> | Child
  node?: Element | undefined
}
/**
 * Create something in development or production.
 */
export type Create = (
  node: Node,
  type: unknown,
  props: Props,
  key: string | undefined
) => JSX.Element
/**
 * Info passed around.
 */
export type State = {
  /**
   *   File path.
   */
  filePath: string | undefined
  /**
   *   Components to swap.
   */
  components: Partial<Components>
  /**
   *   Generate keys to optimize frameworks that support them.
   */
  passKeys: boolean
  /**
   *   Pass `node` to components.
   */
  passNode: boolean
  /**
   *   Casing to use for attribute names.
   */
  elementAttributeNameCase: ElementAttributeNameCase
  /**
   *   Casing to use for property names in `style` objects.
   */
  stylePropertyNameCase: StylePropertyNameCase
  /**
   *   Current schema.
   */
  schema: Schema
  /**
   *   Fragment symbol.
   */
  Fragment: unknown
  /**
   *   Create something in development or production.
   */
  create: Create
}
/**
 * Configuration.
 */
export type RegularFields = {
  /**
   * Components to use.
   */
  components?: Partial<Components> | null | undefined
  /**
   * File path to the original source file.
   *
   * Passed in source info to `jsxDEV` when using the automatic runtime with
   * `development: true`.
   */
  filePath?: string | null | undefined
  /**
   * Generate keys to optimize frameworks that support them.
   *
   * > ðŸ‘‰ **Note**: Solid currently fails if keys are passed.
   */
  passKeys?: boolean | null | undefined
  /**
   * Pass the hast element node to components.
   */
  passNode?: boolean | null | undefined
  /**
   * Specify casing to use for attribute names.
   */
  elementAttributeNameCase?: ElementAttributeNameCase | null | undefined
  /**
   * Specify casing to use for property names in `style` objects.
   */
  stylePropertyNameCase?: StylePropertyNameCase | null | undefined
  /**
   * Whether `tree` is in the `'html'` or `'svg'` space.
   *
   * When an `<svg>` element is found in the HTML space, this package already
   * automatically switches to and from the SVG space when entering and exiting
   * it.
   */
  space?: Space | null | undefined
}
/**
 * Runtime fields when development might be on or off.
 */
export type RuntimeUnknown = {
  /**
   *   Fragment.
   */
  Fragment: Fragment
  /**
   * Dynamic JSX.
   */
  jsx?: Jsx | null | undefined
  /**
   * Static JSX.
   */
  jsxs?: Jsx | null | undefined
  /**
   * Development JSX.
   */
  jsxDEV?: JsxDev | null | undefined
  /**
   *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).
   */
  development: boolean
}
/**
 * Runtime fields when development is off.
 */
export type RuntimeProduction = {
  /**
   *   Fragment.
   */
  Fragment: Fragment
  /**
   *   Dynamic JSX.
   */
  jsx: Jsx
  /**
   *   Static JSX.
   */
  jsxs: Jsx
  /**
   * Development JSX.
   */
  jsxDEV?: JsxDev | null | undefined
  /**
   * Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).
   */
  development?: false | null | undefined
}
/**
 * Runtime fields when development is on.
 */
export type RuntimeDevelopment = {
  /**
   *   Fragment.
   */
  Fragment: Fragment
  /**
   * Dynamic JSX.
   */
  jsx?: Jsx | null | undefined
  /**
   * Static JSX.
   */
  jsxs?: Jsx | null | undefined
  /**
   *   Development JSX.
   */
  jsxDEV: JsxDev
  /**
   *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).
   */
  development: true
}
/**
 * Configuration (production).
 */
export type Production = RuntimeProduction & RegularFields
/**
 * Configuration (development).
 */
export type Development = RuntimeDevelopment & RegularFields
/**
 * Configuration (production or development).
 */
export type Unknown = RuntimeUnknown & RegularFields
/**
 * Configuration.
 */
export type Options = Unknown | Production | Development
